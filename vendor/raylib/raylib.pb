# PB_MODULE_KIND: NATIVE_BINDING
# Auto-generated PB bindings for raylib

RAYLIB_H: int = ...
RAYLIB_VERSION_MAJOR: int = ...
RAYLIB_VERSION_MINOR: int = ...
RAYLIB_VERSION_PATCH: int = ...
RAYLIB_VERSION: int = ...
RLAPI: int = ...
RLAPI: int = ...
RLAPI: int = ...
RLAPI: int = ...
PI: int = ...
DEG2RAD: int = ...
RAD2DEG: int = ...
RL_COLOR_TYPE: int = ...
RL_VECTOR2_TYPE: int = ...
RL_VECTOR4_TYPE: int = ...
RL_MATRIX_TYPE: int = ...
LIGHTGRAY: int = ...
GRAY: int = ...
DARKGRAY: int = ...
YELLOW: int = ...
GOLD: int = ...
ORANGE: int = ...
PINK: int = ...
RED: int = ...
MAROON: int = ...
GREEN: int = ...
LIME: int = ...
DARKGREEN: int = ...
SKYBLUE: int = ...
BLUE: int = ...
DARKBLUE: int = ...
PURPLE: int = ...
VIOLET: int = ...
DARKPURPLE: int = ...
BEIGE: int = ...
BROWN: int = ...
DARKBROWN: int = ...
WHITE: int = ...
BLACK: int = ...
BLANK: int = ...
MAGENTA: int = ...
RAYWHITE: int = ...
RL_BOOL_TYPE: int = ...
MOUSE_LEFT_BUTTON: int = ...
MOUSE_RIGHT_BUTTON: int = ...
MOUSE_MIDDLE_BUTTON: int = ...
MATERIAL_MAP_DIFFUSE: int = ...
MATERIAL_MAP_SPECULAR: int = ...
SHADER_LOC_MAP_DIFFUSE: int = ...
SHADER_LOC_MAP_SPECULAR: int = ...
FLAG_VSYNC_HINT: int = ...
FLAG_FULLSCREEN_MODE: int = ...
FLAG_WINDOW_RESIZABLE: int = ...
FLAG_WINDOW_UNDECORATED: int = ...
FLAG_WINDOW_HIDDEN: int = ...
FLAG_WINDOW_MINIMIZED: int = ...
FLAG_WINDOW_MAXIMIZED: int = ...
FLAG_WINDOW_UNFOCUSED: int = ...
FLAG_WINDOW_TOPMOST: int = ...
FLAG_WINDOW_ALWAYS_RUN: int = ...
FLAG_WINDOW_TRANSPARENT: int = ...
FLAG_WINDOW_HIGHDPI: int = ...
FLAG_WINDOW_MOUSE_PASSTHROUGH: int = ...
FLAG_BORDERLESS_WINDOWED_MODE: int = ...
FLAG_MSAA_4X_HINT: int = ...
FLAG_INTERLACED_HINT: int = ...
LOG_ALL: int = ...
LOG_TRACE: int = ...
LOG_DEBUG: int = ...
LOG_INFO: int = ...
LOG_WARNING: int = ...
LOG_ERROR: int = ...
LOG_FATAL: int = ...
LOG_NONE: int = ...
KEY_NULL: int = ...
KEY_APOSTROPHE: int = ...
KEY_COMMA: int = ...
KEY_MINUS: int = ...
KEY_PERIOD: int = ...
KEY_SLASH: int = ...
KEY_ZERO: int = ...
KEY_ONE: int = ...
KEY_TWO: int = ...
KEY_THREE: int = ...
KEY_FOUR: int = ...
KEY_FIVE: int = ...
KEY_SIX: int = ...
KEY_SEVEN: int = ...
KEY_EIGHT: int = ...
KEY_NINE: int = ...
KEY_SEMICOLON: int = ...
KEY_EQUAL: int = ...
KEY_A: int = ...
KEY_B: int = ...
KEY_C: int = ...
KEY_D: int = ...
KEY_E: int = ...
KEY_F: int = ...
KEY_G: int = ...
KEY_H: int = ...
KEY_I: int = ...
KEY_J: int = ...
KEY_K: int = ...
KEY_L: int = ...
KEY_M: int = ...
KEY_N: int = ...
KEY_O: int = ...
KEY_P: int = ...
KEY_Q: int = ...
KEY_R: int = ...
KEY_S: int = ...
KEY_T: int = ...
KEY_U: int = ...
KEY_V: int = ...
KEY_W: int = ...
KEY_X: int = ...
KEY_Y: int = ...
KEY_Z: int = ...
KEY_LEFT_BRACKET: int = ...
KEY_BACKSLASH: int = ...
KEY_RIGHT_BRACKET: int = ...
KEY_GRAVE: int = ...
KEY_SPACE: int = ...
KEY_ESCAPE: int = ...
KEY_ENTER: int = ...
KEY_TAB: int = ...
KEY_BACKSPACE: int = ...
KEY_INSERT: int = ...
KEY_DELETE: int = ...
KEY_RIGHT: int = ...
KEY_LEFT: int = ...
KEY_DOWN: int = ...
KEY_UP: int = ...
KEY_PAGE_UP: int = ...
KEY_PAGE_DOWN: int = ...
KEY_HOME: int = ...
KEY_END: int = ...
KEY_CAPS_LOCK: int = ...
KEY_SCROLL_LOCK: int = ...
KEY_NUM_LOCK: int = ...
KEY_PRINT_SCREEN: int = ...
KEY_PAUSE: int = ...
KEY_F1: int = ...
KEY_F2: int = ...
KEY_F3: int = ...
KEY_F4: int = ...
KEY_F5: int = ...
KEY_F6: int = ...
KEY_F7: int = ...
KEY_F8: int = ...
KEY_F9: int = ...
KEY_F10: int = ...
KEY_F11: int = ...
KEY_F12: int = ...
KEY_LEFT_SHIFT: int = ...
KEY_LEFT_CONTROL: int = ...
KEY_LEFT_ALT: int = ...
KEY_LEFT_SUPER: int = ...
KEY_RIGHT_SHIFT: int = ...
KEY_RIGHT_CONTROL: int = ...
KEY_RIGHT_ALT: int = ...
KEY_RIGHT_SUPER: int = ...
KEY_KB_MENU: int = ...
KEY_KP_0: int = ...
KEY_KP_1: int = ...
KEY_KP_2: int = ...
KEY_KP_3: int = ...
KEY_KP_4: int = ...
KEY_KP_5: int = ...
KEY_KP_6: int = ...
KEY_KP_7: int = ...
KEY_KP_8: int = ...
KEY_KP_9: int = ...
KEY_KP_DECIMAL: int = ...
KEY_KP_DIVIDE: int = ...
KEY_KP_MULTIPLY: int = ...
KEY_KP_SUBTRACT: int = ...
KEY_KP_ADD: int = ...
KEY_KP_ENTER: int = ...
KEY_KP_EQUAL: int = ...
KEY_BACK: int = ...
KEY_MENU: int = ...
KEY_VOLUME_UP: int = ...
KEY_VOLUME_DOWN: int = ...
MOUSE_BUTTON_LEFT: int = ...
MOUSE_BUTTON_RIGHT: int = ...
MOUSE_BUTTON_MIDDLE: int = ...
MOUSE_BUTTON_SIDE: int = ...
MOUSE_BUTTON_EXTRA: int = ...
MOUSE_BUTTON_FORWARD: int = ...
MOUSE_BUTTON_BACK: int = ...
MOUSE_CURSOR_DEFAULT: int = ...
MOUSE_CURSOR_ARROW: int = ...
MOUSE_CURSOR_IBEAM: int = ...
MOUSE_CURSOR_CROSSHAIR: int = ...
MOUSE_CURSOR_POINTING_HAND: int = ...
MOUSE_CURSOR_RESIZE_EW: int = ...
MOUSE_CURSOR_RESIZE_NS: int = ...
MOUSE_CURSOR_RESIZE_NWSE: int = ...
MOUSE_CURSOR_RESIZE_NESW: int = ...
MOUSE_CURSOR_RESIZE_ALL: int = ...
MOUSE_CURSOR_NOT_ALLOWED: int = ...
GAMEPAD_BUTTON_UNKNOWN: int = ...
GAMEPAD_BUTTON_LEFT_FACE_UP: int = ...
GAMEPAD_BUTTON_LEFT_FACE_RIGHT: int = ...
GAMEPAD_BUTTON_LEFT_FACE_DOWN: int = ...
GAMEPAD_BUTTON_LEFT_FACE_LEFT: int = ...
GAMEPAD_BUTTON_RIGHT_FACE_UP: int = ...
GAMEPAD_BUTTON_RIGHT_FACE_RIGHT: int = ...
GAMEPAD_BUTTON_RIGHT_FACE_DOWN: int = ...
GAMEPAD_BUTTON_RIGHT_FACE_LEFT: int = ...
GAMEPAD_BUTTON_LEFT_TRIGGER_1: int = ...
GAMEPAD_BUTTON_LEFT_TRIGGER_2: int = ...
GAMEPAD_BUTTON_RIGHT_TRIGGER_1: int = ...
GAMEPAD_BUTTON_RIGHT_TRIGGER_2: int = ...
GAMEPAD_BUTTON_MIDDLE_LEFT: int = ...
GAMEPAD_BUTTON_MIDDLE: int = ...
GAMEPAD_BUTTON_MIDDLE_RIGHT: int = ...
GAMEPAD_BUTTON_LEFT_THUMB: int = ...
GAMEPAD_BUTTON_RIGHT_THUMB: int = ...
GAMEPAD_AXIS_LEFT_X: int = ...
GAMEPAD_AXIS_LEFT_Y: int = ...
GAMEPAD_AXIS_RIGHT_X: int = ...
GAMEPAD_AXIS_RIGHT_Y: int = ...
GAMEPAD_AXIS_LEFT_TRIGGER: int = ...
GAMEPAD_AXIS_RIGHT_TRIGGER: int = ...
MATERIAL_MAP_ALBEDO: int = ...
MATERIAL_MAP_METALNESS: int = ...
MATERIAL_MAP_NORMAL: int = ...
MATERIAL_MAP_ROUGHNESS: int = ...
MATERIAL_MAP_OCCLUSION: int = ...
MATERIAL_MAP_EMISSION: int = ...
MATERIAL_MAP_HEIGHT: int = ...
MATERIAL_MAP_CUBEMAP: int = ...
MATERIAL_MAP_IRRADIANCE: int = ...
MATERIAL_MAP_PREFILTER: int = ...
MATERIAL_MAP_BRDF: int = ...
SHADER_LOC_VERTEX_POSITION: int = ...
SHADER_LOC_VERTEX_TEXCOORD01: int = ...
SHADER_LOC_VERTEX_TEXCOORD02: int = ...
SHADER_LOC_VERTEX_NORMAL: int = ...
SHADER_LOC_VERTEX_TANGENT: int = ...
SHADER_LOC_VERTEX_COLOR: int = ...
SHADER_LOC_MATRIX_MVP: int = ...
SHADER_LOC_MATRIX_VIEW: int = ...
SHADER_LOC_MATRIX_PROJECTION: int = ...
SHADER_LOC_MATRIX_MODEL: int = ...
SHADER_LOC_MATRIX_NORMAL: int = ...
SHADER_LOC_VECTOR_VIEW: int = ...
SHADER_LOC_COLOR_DIFFUSE: int = ...
SHADER_LOC_COLOR_SPECULAR: int = ...
SHADER_LOC_COLOR_AMBIENT: int = ...
SHADER_LOC_MAP_ALBEDO: int = ...
SHADER_LOC_MAP_METALNESS: int = ...
SHADER_LOC_MAP_NORMAL: int = ...
SHADER_LOC_MAP_ROUGHNESS: int = ...
SHADER_LOC_MAP_OCCLUSION: int = ...
SHADER_LOC_MAP_EMISSION: int = ...
SHADER_LOC_MAP_HEIGHT: int = ...
SHADER_LOC_MAP_CUBEMAP: int = ...
SHADER_LOC_MAP_IRRADIANCE: int = ...
SHADER_LOC_MAP_PREFILTER: int = ...
SHADER_LOC_MAP_BRDF: int = ...
SHADER_LOC_VERTEX_BONEIDS: int = ...
SHADER_LOC_VERTEX_BONEWEIGHTS: int = ...
SHADER_LOC_BONE_MATRICES: int = ...
SHADER_UNIFORM_FLOAT: int = ...
SHADER_UNIFORM_VEC2: int = ...
SHADER_UNIFORM_VEC3: int = ...
SHADER_UNIFORM_VEC4: int = ...
SHADER_UNIFORM_INT: int = ...
SHADER_UNIFORM_IVEC2: int = ...
SHADER_UNIFORM_IVEC3: int = ...
SHADER_UNIFORM_IVEC4: int = ...
SHADER_UNIFORM_SAMPLER2D: int = ...
SHADER_ATTRIB_FLOAT: int = ...
SHADER_ATTRIB_VEC2: int = ...
SHADER_ATTRIB_VEC3: int = ...
SHADER_ATTRIB_VEC4: int = ...
PIXELFORMAT_UNCOMPRESSED_GRAYSCALE: int = ...
PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA: int = ...
PIXELFORMAT_UNCOMPRESSED_R5G6B5: int = ...
PIXELFORMAT_UNCOMPRESSED_R8G8B8: int = ...
PIXELFORMAT_UNCOMPRESSED_R5G5B5A1: int = ...
PIXELFORMAT_UNCOMPRESSED_R4G4B4A4: int = ...
PIXELFORMAT_UNCOMPRESSED_R8G8B8A8: int = ...
PIXELFORMAT_UNCOMPRESSED_R32: int = ...
PIXELFORMAT_UNCOMPRESSED_R32G32B32: int = ...
PIXELFORMAT_UNCOMPRESSED_R32G32B32A32: int = ...
PIXELFORMAT_UNCOMPRESSED_R16: int = ...
PIXELFORMAT_UNCOMPRESSED_R16G16B16: int = ...
PIXELFORMAT_UNCOMPRESSED_R16G16B16A16: int = ...
PIXELFORMAT_COMPRESSED_DXT1_RGB: int = ...
PIXELFORMAT_COMPRESSED_DXT1_RGBA: int = ...
PIXELFORMAT_COMPRESSED_DXT3_RGBA: int = ...
PIXELFORMAT_COMPRESSED_DXT5_RGBA: int = ...
PIXELFORMAT_COMPRESSED_ETC1_RGB: int = ...
PIXELFORMAT_COMPRESSED_ETC2_RGB: int = ...
PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA: int = ...
PIXELFORMAT_COMPRESSED_PVRT_RGB: int = ...
PIXELFORMAT_COMPRESSED_PVRT_RGBA: int = ...
PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA: int = ...
PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA: int = ...
TEXTURE_FILTER_POINT: int = ...
TEXTURE_FILTER_BILINEAR: int = ...
TEXTURE_FILTER_TRILINEAR: int = ...
TEXTURE_FILTER_ANISOTROPIC_4X: int = ...
TEXTURE_FILTER_ANISOTROPIC_8X: int = ...
TEXTURE_FILTER_ANISOTROPIC_16X: int = ...
TEXTURE_WRAP_REPEAT: int = ...
TEXTURE_WRAP_CLAMP: int = ...
TEXTURE_WRAP_MIRROR_REPEAT: int = ...
TEXTURE_WRAP_MIRROR_CLAMP: int = ...
CUBEMAP_LAYOUT_AUTO_DETECT: int = ...
CUBEMAP_LAYOUT_LINE_VERTICAL: int = ...
CUBEMAP_LAYOUT_LINE_HORIZONTAL: int = ...
CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR: int = ...
CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE: int = ...
FONT_DEFAULT: int = ...
FONT_BITMAP: int = ...
FONT_SDF: int = ...
BLEND_ALPHA: int = ...
BLEND_ADDITIVE: int = ...
BLEND_MULTIPLIED: int = ...
BLEND_ADD_COLORS: int = ...
BLEND_SUBTRACT_COLORS: int = ...
BLEND_ALPHA_PREMULTIPLY: int = ...
BLEND_CUSTOM: int = ...
BLEND_CUSTOM_SEPARATE: int = ...
GESTURE_NONE: int = ...
GESTURE_TAP: int = ...
GESTURE_DOUBLETAP: int = ...
GESTURE_HOLD: int = ...
GESTURE_DRAG: int = ...
GESTURE_SWIPE_RIGHT: int = ...
GESTURE_SWIPE_LEFT: int = ...
GESTURE_SWIPE_UP: int = ...
GESTURE_SWIPE_DOWN: int = ...
GESTURE_PINCH_IN: int = ...
GESTURE_PINCH_OUT: int = ...
CAMERA_CUSTOM: int = ...
CAMERA_FREE: int = ...
CAMERA_ORBITAL: int = ...
CAMERA_FIRST_PERSON: int = ...
CAMERA_THIRD_PERSON: int = ...
CAMERA_PERSPECTIVE: int = ...
CAMERA_ORTHOGRAPHIC: int = ...
NPATCH_NINE_PATCH: int = ...
NPATCH_THREE_PATCH_VERTICAL: int = ...
NPATCH_THREE_PATCH_HORIZONTAL: int = ...

class Vector2:
    x: float
    y: float

class Vector3:
    x: float
    y: float
    z: float

class Vector4:
    x: float
    y: float
    z: float
    w: float

class Matrix:
    m0: float
    m4: float
    m8: float
    m12: float
    m1: float
    m5: float
    m9: float
    m13: float
    m2: float
    m6: float
    m10: float
    m14: float
    m3: float
    m7: float
    m11: float
    m15: float

class Color:
    r: int
    g: int
    b: int
    a: int

class Rectangle:
    x: float
    y: float
    width: float
    height: float

class Image:
    data: None
    width: int
    height: int
    mipmaps: int
    format: int

class Texture:
    id: int
    width: int
    height: int
    mipmaps: int
    format: int

class RenderTexture:
    id: int
    texture: Texture
    depth: Texture

class NPatchInfo:
    source: Rectangle
    left: int
    top: int
    right: int
    bottom: int
    layout: int

class GlyphInfo:
    value: int
    offsetX: int
    offsetY: int
    advanceX: int
    image: Image

class Font:
    baseSize: int
    glyphCount: int
    glyphPadding: int
    texture: Texture2D
    recs: Rectangle
    glyphs: GlyphInfo

class Camera3D:
    position: Vector3
    target: Vector3
    up: Vector3
    fovy: float
    projection: int

class Camera2D:
    offset: Vector2
    target: Vector2
    rotation: float
    zoom: float

class Mesh:
    vertexCount: int
    triangleCount: int
    vertices: float
    texcoords: float
    texcoords2: float
    normals: float
    tangents: float
    colors: int
    indices: int
    animVertices: float
    animNormals: float
    boneIds: int
    boneWeights: float
    boneMatrices: Matrix
    boneCount: int
    vaoId: int
    vboId: int

class Shader:
    id: int
    locs: int

class MaterialMap:
    texture: Texture2D
    color: Color
    value: float

class Material:
    shader: Shader
    maps: MaterialMap
    params: float

class Transform:
    translation: Vector3
    rotation: Quaternion
    scale: Vector3

class BoneInfo:
    name: int
    parent: int

class Model:
    transform: Matrix
    meshCount: int
    materialCount: int
    meshes: Mesh
    materials: Material
    meshMaterial: int
    boneCount: int
    bones: BoneInfo
    bindPose: Transform

class ModelAnimation:
    boneCount: int
    frameCount: int
    bones: BoneInfo
    framePoses: Transform
    name: int

class Ray:
    position: Vector3
    direction: Vector3

class RayCollision:
    hit: bool
    distance: float
    point: Vector3
    normal: Vector3

class BoundingBox:
    min: Vector3
    max: Vector3

class Wave:
    frameCount: int
    sampleRate: int
    sampleSize: int
    channels: int
    data: None

class AudioStream:
    buffer: rAudioBuffer
    processor: rAudioProcessor
    sampleRate: int
    sampleSize: int
    channels: int

class Sound:
    stream: AudioStream
    frameCount: int

class Music:
    stream: AudioStream
    frameCount: int
    looping: bool
    ctxType: int
    ctxData: None

class VrDeviceInfo:
    hResolution: int
    vResolution: int
    hScreenSize: float
    vScreenSize: float
    eyeToScreenDistance: float
    lensSeparationDistance: float
    interpupillaryDistance: float
    lensDistortionValues: float
    chromaAbCorrection: float

class VrStereoConfig:
    projection: Matrix
    viewOffset: Matrix
    leftLensCenter: float
    rightLensCenter: float
    leftScreenCenter: float
    rightScreenCenter: float
    scale: float
    scaleIn: float

class FilePathList:
    capacity: int
    count: int
    paths: int

class AutomationEvent:
    frame: int
    type: int
    params: int

class AutomationEventList:
    capacity: int
    count: int
    events: AutomationEvent

Quaternion = Vector4
Texture2D = Texture
TextureCubemap = Texture
RenderTexture2D = RenderTexture
Camera = Camera3D

def InitWindow(width: int, height: int, title: str) -> None: ...
def CloseWindow() -> None: ...
def WindowShouldClose() -> bool: ...
def IsWindowReady() -> bool: ...
def IsWindowFullscreen() -> bool: ...
def IsWindowHidden() -> bool: ...
def IsWindowMinimized() -> bool: ...
def IsWindowMaximized() -> bool: ...
def IsWindowFocused() -> bool: ...
def IsWindowResized() -> bool: ...
def IsWindowState(flag: int) -> bool: ...
def SetWindowState(flags: int) -> None: ...
def ClearWindowState(flags: int) -> None: ...
def ToggleFullscreen() -> None: ...
def ToggleBorderlessWindowed() -> None: ...
def MaximizeWindow() -> None: ...
def MinimizeWindow() -> None: ...
def RestoreWindow() -> None: ...
def SetWindowIcon(image: Image) -> None: ...
def SetWindowIcons(images: int, count: int) -> None: ...
def SetWindowTitle(title: str) -> None: ...
def SetWindowPosition(x: int, y: int) -> None: ...
def SetWindowMonitor(monitor: int) -> None: ...
def SetWindowMinSize(width: int, height: int) -> None: ...
def SetWindowMaxSize(width: int, height: int) -> None: ...
def SetWindowSize(width: int, height: int) -> None: ...
def SetWindowOpacity(opacity: float) -> None: ...
def SetWindowFocused() -> None: ...
def GetScreenWidth() -> int: ...
def GetScreenHeight() -> int: ...
def GetRenderWidth() -> int: ...
def GetRenderHeight() -> int: ...
def GetMonitorCount() -> int: ...
def GetCurrentMonitor() -> int: ...
def GetMonitorPosition(monitor: int) -> Vector2: ...
def GetMonitorWidth(monitor: int) -> int: ...
def GetMonitorHeight(monitor: int) -> int: ...
def GetMonitorPhysicalWidth(monitor: int) -> int: ...
def GetMonitorPhysicalHeight(monitor: int) -> int: ...
def GetMonitorRefreshRate(monitor: int) -> int: ...
def GetWindowPosition() -> Vector2: ...
def GetWindowScaleDPI() -> Vector2: ...
def SetClipboardText(text: str) -> None: ...
def GetClipboardImage() -> Image: ...
def EnableEventWaiting() -> None: ...
def DisableEventWaiting() -> None: ...
def ShowCursor() -> None: ...
def HideCursor() -> None: ...
def IsCursorHidden() -> bool: ...
def EnableCursor() -> None: ...
def DisableCursor() -> None: ...
def IsCursorOnScreen() -> bool: ...
def ClearBackground(color: Color) -> None: ...
def BeginDrawing() -> None: ...
def EndDrawing() -> None: ...
def BeginMode2D(camera: Camera2D) -> None: ...
def EndMode2D() -> None: ...
def BeginMode3D(camera: Camera3D) -> None: ...
def EndMode3D() -> None: ...
def BeginTextureMode(target: RenderTexture2D) -> None: ...
def EndTextureMode() -> None: ...
def BeginShaderMode(shader: Shader) -> None: ...
def EndShaderMode() -> None: ...
def BeginBlendMode(mode: int) -> None: ...
def EndBlendMode() -> None: ...
def BeginScissorMode(x: int, y: int, width: int, height: int) -> None: ...
def EndScissorMode() -> None: ...
def BeginVrStereoMode(config: VrStereoConfig) -> None: ...
def EndVrStereoMode() -> None: ...
def LoadVrStereoConfig(device: VrDeviceInfo) -> VrStereoConfig: ...
def UnloadVrStereoConfig(config: VrStereoConfig) -> None: ...
def LoadShader(vsFileName: str, fsFileName: str) -> Shader: ...
def LoadShaderFromMemory(vsCode: str, fsCode: str) -> Shader: ...
def IsShaderValid(shader: Shader) -> bool: ...
def GetShaderLocation(shader: Shader, uniformName: str) -> int: ...
def GetShaderLocationAttrib(shader: Shader, attribName: str) -> int: ...
def SetShaderValue(shader: Shader, locIndex: int, value: int, uniformType: int) -> None: ...
def SetShaderValueV(shader: Shader, locIndex: int, value: int, uniformType: int, count: int) -> None: ...
def SetShaderValueMatrix(shader: Shader, locIndex: int, mat: Matrix) -> None: ...
def SetShaderValueTexture(shader: Shader, locIndex: int, texture: Texture2D) -> None: ...
def UnloadShader(shader: Shader) -> None: ...
def GetScreenToWorldRay(position: Vector2, camera: Camera) -> Ray: ...
def GetScreenToWorldRayEx(position: Vector2, camera: Camera, width: int, height: int) -> Ray: ...
def GetWorldToScreen(position: Vector3, camera: Camera) -> Vector2: ...
def GetWorldToScreenEx(position: Vector3, camera: Camera, width: int, height: int) -> Vector2: ...
def GetWorldToScreen2D(position: Vector2, camera: Camera2D) -> Vector2: ...
def GetScreenToWorld2D(position: Vector2, camera: Camera2D) -> Vector2: ...
def GetCameraMatrix(camera: Camera) -> Matrix: ...
def GetCameraMatrix2D(camera: Camera2D) -> Matrix: ...
def SetTargetFPS(fps: int) -> None: ...
def GetFrameTime() -> float: ...
def GetTime() -> float: ...
def GetFPS() -> int: ...
def SwapScreenBuffer() -> None: ...
def PollInputEvents() -> None: ...
def WaitTime(seconds: float) -> None: ...
def SetRandomSeed(seed: int) -> None: ...
def GetRandomValue(min: int, max: int) -> int: ...
def UnloadRandomSequence(sequence: int) -> None: ...
def TakeScreenshot(fileName: str) -> None: ...
def SetConfigFlags(flags: int) -> None: ...
def OpenURL(url: str) -> None: ...
def TraceLog(logLevel: int, text: str, param3: ...) -> None: ...
def SetTraceLogLevel(logLevel: int) -> None: ...
def MemFree(ptr: int) -> None: ...
def SetTraceLogCallback(callback: TraceLogCallback) -> None: ...
def SetLoadFileDataCallback(callback: LoadFileDataCallback) -> None: ...
def SetSaveFileDataCallback(callback: SaveFileDataCallback) -> None: ...
def SetLoadFileTextCallback(callback: LoadFileTextCallback) -> None: ...
def SetSaveFileTextCallback(callback: SaveFileTextCallback) -> None: ...
def UnloadFileData(data: int) -> None: ...
def SaveFileData(fileName: str, data: int, dataSize: int) -> bool: ...
def ExportDataAsCode(data: int, dataSize: int, fileName: str) -> bool: ...
def UnloadFileText(text: str) -> None: ...
def SaveFileText(fileName: str, text: str) -> bool: ...
def FileExists(fileName: str) -> bool: ...
def DirectoryExists(dirPath: str) -> bool: ...
def IsFileExtension(fileName: str, ext: str) -> bool: ...
def GetFileLength(fileName: str) -> int: ...
def MakeDirectory(dirPath: str) -> int: ...
def ChangeDirectory(dir: str) -> bool: ...
def IsPathFile(path: str) -> bool: ...
def IsFileNameValid(fileName: str) -> bool: ...
def LoadDirectoryFiles(dirPath: str) -> FilePathList: ...
def LoadDirectoryFilesEx(basePath: str, filter: str, scanSubdirs: bool) -> FilePathList: ...
def UnloadDirectoryFiles(files: FilePathList) -> None: ...
def IsFileDropped() -> bool: ...
def LoadDroppedFiles() -> FilePathList: ...
def UnloadDroppedFiles(files: FilePathList) -> None: ...
def GetFileModTime(fileName: str) -> long: ...
def ComputeCRC32(data: int, dataSize: int) -> int: ...
def LoadAutomationEventList(fileName: str) -> AutomationEventList: ...
def UnloadAutomationEventList(list: AutomationEventList) -> None: ...
def ExportAutomationEventList(list: AutomationEventList, fileName: str) -> bool: ...
def SetAutomationEventList(list: int) -> None: ...
def SetAutomationEventBaseFrame(frame: int) -> None: ...
def StartAutomationEventRecording() -> None: ...
def StopAutomationEventRecording() -> None: ...
def PlayAutomationEvent(event: AutomationEvent) -> None: ...
def IsKeyPressed(key: int) -> bool: ...
def IsKeyPressedRepeat(key: int) -> bool: ...
def IsKeyDown(key: int) -> bool: ...
def IsKeyReleased(key: int) -> bool: ...
def IsKeyUp(key: int) -> bool: ...
def GetKeyPressed() -> int: ...
def GetCharPressed() -> int: ...
def SetExitKey(key: int) -> None: ...
def IsGamepadAvailable(gamepad: int) -> bool: ...
def IsGamepadButtonPressed(gamepad: int, button: int) -> bool: ...
def IsGamepadButtonDown(gamepad: int, button: int) -> bool: ...
def IsGamepadButtonReleased(gamepad: int, button: int) -> bool: ...
def IsGamepadButtonUp(gamepad: int, button: int) -> bool: ...
def GetGamepadButtonPressed() -> int: ...
def GetGamepadAxisCount(gamepad: int) -> int: ...
def GetGamepadAxisMovement(gamepad: int, axis: int) -> float: ...
def SetGamepadMappings(mappings: str) -> int: ...
def SetGamepadVibration(gamepad: int, leftMotor: float, rightMotor: float, duration: float) -> None: ...
def IsMouseButtonPressed(button: int) -> bool: ...
def IsMouseButtonDown(button: int) -> bool: ...
def IsMouseButtonReleased(button: int) -> bool: ...
def IsMouseButtonUp(button: int) -> bool: ...
def GetMouseX() -> int: ...
def GetMouseY() -> int: ...
def GetMousePosition() -> Vector2: ...
def GetMouseDelta() -> Vector2: ...
def SetMousePosition(x: int, y: int) -> None: ...
def SetMouseOffset(offsetX: int, offsetY: int) -> None: ...
def SetMouseScale(scaleX: float, scaleY: float) -> None: ...
def GetMouseWheelMove() -> float: ...
def GetMouseWheelMoveV() -> Vector2: ...
def SetMouseCursor(cursor: int) -> None: ...
def GetTouchX() -> int: ...
def GetTouchY() -> int: ...
def GetTouchPosition(index: int) -> Vector2: ...
def GetTouchPointId(index: int) -> int: ...
def GetTouchPointCount() -> int: ...
def SetGesturesEnabled(flags: int) -> None: ...
def IsGestureDetected(gesture: int) -> bool: ...
def GetGestureDetected() -> int: ...
def GetGestureHoldDuration() -> float: ...
def GetGestureDragVector() -> Vector2: ...
def GetGestureDragAngle() -> float: ...
def GetGesturePinchVector() -> Vector2: ...
def GetGesturePinchAngle() -> float: ...
def UpdateCamera(camera: int, mode: int) -> None: ...
def UpdateCameraPro(camera: int, movement: Vector3, rotation: Vector3, zoom: float) -> None: ...
def SetShapesTexture(texture: Texture2D, source: Rectangle) -> None: ...
def GetShapesTexture() -> Texture2D: ...
def GetShapesTextureRectangle() -> Rectangle: ...
def DrawPixel(posX: int, posY: int, color: Color) -> None: ...
def DrawPixelV(position: Vector2, color: Color) -> None: ...
def DrawLine(startPosX: int, startPosY: int, endPosX: int, endPosY: int, color: Color) -> None: ...
def DrawLineV(startPos: Vector2, endPos: Vector2, color: Color) -> None: ...
def DrawLineEx(startPos: Vector2, endPos: Vector2, thick: float, color: Color) -> None: ...
def DrawLineStrip(points: int, pointCount: int, color: Color) -> None: ...
def DrawLineBezier(startPos: Vector2, endPos: Vector2, thick: float, color: Color) -> None: ...
def DrawCircle(centerX: int, centerY: int, radius: float, color: Color) -> None: ...
def DrawCircleSector(center: Vector2, radius: float, startAngle: float, endAngle: float, segments: int, color: Color) -> None: ...
def DrawCircleSectorLines(center: Vector2, radius: float, startAngle: float, endAngle: float, segments: int, color: Color) -> None: ...
def DrawCircleGradient(centerX: int, centerY: int, radius: float, inner: Color, outer: Color) -> None: ...
def DrawCircleV(center: Vector2, radius: float, color: Color) -> None: ...
def DrawCircleLines(centerX: int, centerY: int, radius: float, color: Color) -> None: ...
def DrawCircleLinesV(center: Vector2, radius: float, color: Color) -> None: ...
def DrawEllipse(centerX: int, centerY: int, radiusH: float, radiusV: float, color: Color) -> None: ...
def DrawEllipseLines(centerX: int, centerY: int, radiusH: float, radiusV: float, color: Color) -> None: ...
def DrawRing(center: Vector2, innerRadius: float, outerRadius: float, startAngle: float, endAngle: float, segments: int, color: Color) -> None: ...
def DrawRingLines(center: Vector2, innerRadius: float, outerRadius: float, startAngle: float, endAngle: float, segments: int, color: Color) -> None: ...
def DrawRectangle(posX: int, posY: int, width: int, height: int, color: Color) -> None: ...
def DrawRectangleV(position: Vector2, size: Vector2, color: Color) -> None: ...
def DrawRectangleRec(rec: Rectangle, color: Color) -> None: ...
def DrawRectanglePro(rec: Rectangle, origin: Vector2, rotation: float, color: Color) -> None: ...
def DrawRectangleGradientV(posX: int, posY: int, width: int, height: int, top: Color, bottom: Color) -> None: ...
def DrawRectangleGradientH(posX: int, posY: int, width: int, height: int, left: Color, right: Color) -> None: ...
def DrawRectangleGradientEx(rec: Rectangle, topLeft: Color, bottomLeft: Color, topRight: Color, bottomRight: Color) -> None: ...
def DrawRectangleLines(posX: int, posY: int, width: int, height: int, color: Color) -> None: ...
def DrawRectangleLinesEx(rec: Rectangle, lineThick: float, color: Color) -> None: ...
def DrawRectangleRounded(rec: Rectangle, roundness: float, segments: int, color: Color) -> None: ...
def DrawRectangleRoundedLines(rec: Rectangle, roundness: float, segments: int, color: Color) -> None: ...
def DrawRectangleRoundedLinesEx(rec: Rectangle, roundness: float, segments: int, lineThick: float, color: Color) -> None: ...
def DrawTriangle(v1: Vector2, v2: Vector2, v3: Vector2, color: Color) -> None: ...
def DrawTriangleLines(v1: Vector2, v2: Vector2, v3: Vector2, color: Color) -> None: ...
def DrawTriangleFan(points: int, pointCount: int, color: Color) -> None: ...
def DrawTriangleStrip(points: int, pointCount: int, color: Color) -> None: ...
def DrawPoly(center: Vector2, sides: int, radius: float, rotation: float, color: Color) -> None: ...
def DrawPolyLines(center: Vector2, sides: int, radius: float, rotation: float, color: Color) -> None: ...
def DrawPolyLinesEx(center: Vector2, sides: int, radius: float, rotation: float, lineThick: float, color: Color) -> None: ...
def DrawSplineLinear(points: int, pointCount: int, thick: float, color: Color) -> None: ...
def DrawSplineBasis(points: int, pointCount: int, thick: float, color: Color) -> None: ...
def DrawSplineCatmullRom(points: int, pointCount: int, thick: float, color: Color) -> None: ...
def DrawSplineBezierQuadratic(points: int, pointCount: int, thick: float, color: Color) -> None: ...
def DrawSplineBezierCubic(points: int, pointCount: int, thick: float, color: Color) -> None: ...
def DrawSplineSegmentLinear(p1: Vector2, p2: Vector2, thick: float, color: Color) -> None: ...
def DrawSplineSegmentBasis(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, thick: float, color: Color) -> None: ...
def DrawSplineSegmentCatmullRom(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, thick: float, color: Color) -> None: ...
def DrawSplineSegmentBezierQuadratic(p1: Vector2, c2: Vector2, p3: Vector2, thick: float, color: Color) -> None: ...
def DrawSplineSegmentBezierCubic(p1: Vector2, c2: Vector2, c3: Vector2, p4: Vector2, thick: float, color: Color) -> None: ...
def GetSplinePointLinear(startPos: Vector2, endPos: Vector2, t: float) -> Vector2: ...
def GetSplinePointBasis(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, t: float) -> Vector2: ...
def GetSplinePointCatmullRom(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, t: float) -> Vector2: ...
def GetSplinePointBezierQuad(p1: Vector2, c2: Vector2, p3: Vector2, t: float) -> Vector2: ...
def GetSplinePointBezierCubic(p1: Vector2, c2: Vector2, c3: Vector2, p4: Vector2, t: float) -> Vector2: ...
def CheckCollisionRecs(rec1: Rectangle, rec2: Rectangle) -> bool: ...
def CheckCollisionCircles(center1: Vector2, radius1: float, center2: Vector2, radius2: float) -> bool: ...
def CheckCollisionCircleRec(center: Vector2, radius: float, rec: Rectangle) -> bool: ...
def CheckCollisionCircleLine(center: Vector2, radius: float, p1: Vector2, p2: Vector2) -> bool: ...
def CheckCollisionPointRec(point: Vector2, rec: Rectangle) -> bool: ...
def CheckCollisionPointCircle(point: Vector2, center: Vector2, radius: float) -> bool: ...
def CheckCollisionPointTriangle(point: Vector2, p1: Vector2, p2: Vector2, p3: Vector2) -> bool: ...
def CheckCollisionPointLine(point: Vector2, p1: Vector2, p2: Vector2, threshold: int) -> bool: ...
def CheckCollisionPointPoly(point: Vector2, points: int, pointCount: int) -> bool: ...
def CheckCollisionLines(startPos1: Vector2, endPos1: Vector2, startPos2: Vector2, endPos2: Vector2, collisionPoint: int) -> bool: ...
def GetCollisionRec(rec1: Rectangle, rec2: Rectangle) -> Rectangle: ...
def LoadImage(fileName: str) -> Image: ...
def LoadImageRaw(fileName: str, width: int, height: int, format: int, headerSize: int) -> Image: ...
def LoadImageAnim(fileName: str, frames: int) -> Image: ...
def LoadImageAnimFromMemory(fileType: str, fileData: int, dataSize: int, frames: int) -> Image: ...
def LoadImageFromMemory(fileType: str, fileData: int, dataSize: int) -> Image: ...
def LoadImageFromTexture(texture: Texture2D) -> Image: ...
def LoadImageFromScreen() -> Image: ...
def IsImageValid(image: Image) -> bool: ...
def UnloadImage(image: Image) -> None: ...
def ExportImage(image: Image, fileName: str) -> bool: ...
def ExportImageAsCode(image: Image, fileName: str) -> bool: ...
def GenImageColor(width: int, height: int, color: Color) -> Image: ...
def GenImageGradientLinear(width: int, height: int, direction: int, start: Color, end: Color) -> Image: ...
def GenImageGradientRadial(width: int, height: int, density: float, inner: Color, outer: Color) -> Image: ...
def GenImageGradientSquare(width: int, height: int, density: float, inner: Color, outer: Color) -> Image: ...
def GenImageChecked(width: int, height: int, checksX: int, checksY: int, col1: Color, col2: Color) -> Image: ...
def GenImageWhiteNoise(width: int, height: int, factor: float) -> Image: ...
def GenImagePerlinNoise(width: int, height: int, offsetX: int, offsetY: int, scale: float) -> Image: ...
def GenImageCellular(width: int, height: int, tileSize: int) -> Image: ...
def GenImageText(width: int, height: int, text: str) -> Image: ...
def ImageCopy(image: Image) -> Image: ...
def ImageFromImage(image: Image, rec: Rectangle) -> Image: ...
def ImageFromChannel(image: Image, selectedChannel: int) -> Image: ...
def ImageText(text: str, fontSize: int, color: Color) -> Image: ...
def ImageTextEx(font: Font, text: str, fontSize: float, spacing: float, tint: Color) -> Image: ...
def ImageFormat(image: int, newFormat: int) -> None: ...
def ImageToPOT(image: int, fill: Color) -> None: ...
def ImageCrop(image: int, crop: Rectangle) -> None: ...
def ImageAlphaCrop(image: int, threshold: float) -> None: ...
def ImageAlphaClear(image: int, color: Color, threshold: float) -> None: ...
def ImageAlphaMask(image: int, alphaMask: Image) -> None: ...
def ImageAlphaPremultiply(image: int) -> None: ...
def ImageBlurGaussian(image: int, blurSize: int) -> None: ...
def ImageKernelConvolution(image: int, kernel: int, kernelSize: int) -> None: ...
def ImageResize(image: int, newWidth: int, newHeight: int) -> None: ...
def ImageResizeNN(image: int, newWidth: int, newHeight: int) -> None: ...
def ImageResizeCanvas(image: int, newWidth: int, newHeight: int, offsetX: int, offsetY: int, fill: Color) -> None: ...
def ImageMipmaps(image: int) -> None: ...
def ImageDither(image: int, rBpp: int, gBpp: int, bBpp: int, aBpp: int) -> None: ...
def ImageFlipVertical(image: int) -> None: ...
def ImageFlipHorizontal(image: int) -> None: ...
def ImageRotate(image: int, degrees: int) -> None: ...
def ImageRotateCW(image: int) -> None: ...
def ImageRotateCCW(image: int) -> None: ...
def ImageColorTint(image: int, color: Color) -> None: ...
def ImageColorInvert(image: int) -> None: ...
def ImageColorGrayscale(image: int) -> None: ...
def ImageColorContrast(image: int, contrast: float) -> None: ...
def ImageColorBrightness(image: int, brightness: int) -> None: ...
def ImageColorReplace(image: int, color: Color, replace: Color) -> None: ...
def UnloadImageColors(colors: int) -> None: ...
def UnloadImagePalette(colors: int) -> None: ...
def GetImageAlphaBorder(image: Image, threshold: float) -> Rectangle: ...
def GetImageColor(image: Image, x: int, y: int) -> Color: ...
def ImageClearBackground(dst: int, color: Color) -> None: ...
def ImageDrawPixel(dst: int, posX: int, posY: int, color: Color) -> None: ...
def ImageDrawPixelV(dst: int, position: Vector2, color: Color) -> None: ...
def ImageDrawLine(dst: int, startPosX: int, startPosY: int, endPosX: int, endPosY: int, color: Color) -> None: ...
def ImageDrawLineV(dst: int, start: Vector2, end: Vector2, color: Color) -> None: ...
def ImageDrawLineEx(dst: int, start: Vector2, end: Vector2, thick: int, color: Color) -> None: ...
def ImageDrawCircle(dst: int, centerX: int, centerY: int, radius: int, color: Color) -> None: ...
def ImageDrawCircleV(dst: int, center: Vector2, radius: int, color: Color) -> None: ...
def ImageDrawCircleLines(dst: int, centerX: int, centerY: int, radius: int, color: Color) -> None: ...
def ImageDrawCircleLinesV(dst: int, center: Vector2, radius: int, color: Color) -> None: ...
def ImageDrawRectangle(dst: int, posX: int, posY: int, width: int, height: int, color: Color) -> None: ...
def ImageDrawRectangleV(dst: int, position: Vector2, size: Vector2, color: Color) -> None: ...
def ImageDrawRectangleRec(dst: int, rec: Rectangle, color: Color) -> None: ...
def ImageDrawRectangleLines(dst: int, rec: Rectangle, thick: int, color: Color) -> None: ...
def ImageDrawTriangle(dst: int, v1: Vector2, v2: Vector2, v3: Vector2, color: Color) -> None: ...
def ImageDrawTriangleEx(dst: int, v1: Vector2, v2: Vector2, v3: Vector2, c1: Color, c2: Color, c3: Color) -> None: ...
def ImageDrawTriangleLines(dst: int, v1: Vector2, v2: Vector2, v3: Vector2, color: Color) -> None: ...
def ImageDrawTriangleFan(dst: int, points: int, pointCount: int, color: Color) -> None: ...
def ImageDrawTriangleStrip(dst: int, points: int, pointCount: int, color: Color) -> None: ...
def ImageDraw(dst: int, src: Image, srcRec: Rectangle, dstRec: Rectangle, tint: Color) -> None: ...
def ImageDrawText(dst: int, text: str, posX: int, posY: int, fontSize: int, color: Color) -> None: ...
def ImageDrawTextEx(dst: int, font: Font, text: str, position: Vector2, fontSize: float, spacing: float, tint: Color) -> None: ...
def LoadTexture(fileName: str) -> Texture2D: ...
def LoadTextureFromImage(image: Image) -> Texture2D: ...
def LoadTextureCubemap(image: Image, layout: int) -> TextureCubemap: ...
def LoadRenderTexture(width: int, height: int) -> RenderTexture2D: ...
def IsTextureValid(texture: Texture2D) -> bool: ...
def UnloadTexture(texture: Texture2D) -> None: ...
def IsRenderTextureValid(target: RenderTexture2D) -> bool: ...
def UnloadRenderTexture(target: RenderTexture2D) -> None: ...
def UpdateTexture(texture: Texture2D, pixels: int) -> None: ...
def UpdateTextureRec(texture: Texture2D, rec: Rectangle, pixels: int) -> None: ...
def GenTextureMipmaps(texture: int) -> None: ...
def SetTextureFilter(texture: Texture2D, filter: int) -> None: ...
def SetTextureWrap(texture: Texture2D, wrap: int) -> None: ...
def DrawTexture(texture: Texture2D, posX: int, posY: int, tint: Color) -> None: ...
def DrawTextureV(texture: Texture2D, position: Vector2, tint: Color) -> None: ...
def DrawTextureEx(texture: Texture2D, position: Vector2, rotation: float, scale: float, tint: Color) -> None: ...
def DrawTextureRec(texture: Texture2D, source: Rectangle, position: Vector2, tint: Color) -> None: ...
def DrawTexturePro(texture: Texture2D, source: Rectangle, dest: Rectangle, origin: Vector2, rotation: float, tint: Color) -> None: ...
def DrawTextureNPatch(texture: Texture2D, nPatchInfo: NPatchInfo, dest: Rectangle, origin: Vector2, rotation: float, tint: Color) -> None: ...
def ColorIsEqual(col1: Color, col2: Color) -> bool: ...
def Fade(color: Color, alpha: float) -> Color: ...
def ColorToInt(color: Color) -> int: ...
def ColorNormalize(color: Color) -> Vector4: ...
def ColorFromNormalized(normalized: Vector4) -> Color: ...
def ColorToHSV(color: Color) -> Vector3: ...
def ColorFromHSV(hue: float, saturation: float, value: float) -> Color: ...
def ColorTint(color: Color, tint: Color) -> Color: ...
def ColorBrightness(color: Color, factor: float) -> Color: ...
def ColorContrast(color: Color, contrast: float) -> Color: ...
def ColorAlpha(color: Color, alpha: float) -> Color: ...
def ColorAlphaBlend(dst: Color, src: Color, tint: Color) -> Color: ...
def ColorLerp(color1: Color, color2: Color, factor: float) -> Color: ...
def GetColor(hexValue: int) -> Color: ...
def GetPixelColor(srcPtr: int, format: int) -> Color: ...
def SetPixelColor(dstPtr: int, color: Color, format: int) -> None: ...
def GetPixelDataSize(width: int, height: int, format: int) -> int: ...
def GetFontDefault() -> Font: ...
def LoadFont(fileName: str) -> Font: ...
def LoadFontEx(fileName: str, fontSize: int, codepoints: int, codepointCount: int) -> Font: ...
def LoadFontFromImage(image: Image, key: Color, firstChar: int) -> Font: ...
def LoadFontFromMemory(fileType: str, fileData: int, dataSize: int, fontSize: int, codepoints: int, codepointCount: int) -> Font: ...
def IsFontValid(font: Font) -> bool: ...
def GenImageFontAtlas(glyphs: int, glyphRecs: int, glyphCount: int, fontSize: int, padding: int, packMethod: int) -> Image: ...
def UnloadFontData(glyphs: int, glyphCount: int) -> None: ...
def UnloadFont(font: Font) -> None: ...
def ExportFontAsCode(font: Font, fileName: str) -> bool: ...
def DrawFPS(posX: int, posY: int) -> None: ...
def DrawText(text: str, posX: int, posY: int, fontSize: int, color: Color) -> None: ...
def DrawTextEx(font: Font, text: str, position: Vector2, fontSize: float, spacing: float, tint: Color) -> None: ...
def DrawTextPro(font: Font, text: str, position: Vector2, origin: Vector2, rotation: float, fontSize: float, spacing: float, tint: Color) -> None: ...
def DrawTextCodepoint(font: Font, codepoint: int, position: Vector2, fontSize: float, tint: Color) -> None: ...
def DrawTextCodepoints(font: Font, codepoints: int, codepointCount: int, position: Vector2, fontSize: float, spacing: float, tint: Color) -> None: ...
def SetTextLineSpacing(spacing: int) -> None: ...
def MeasureText(text: str, fontSize: int) -> int: ...
def MeasureTextEx(font: Font, text: str, fontSize: float, spacing: float) -> Vector2: ...
def GetGlyphIndex(font: Font, codepoint: int) -> int: ...
def GetGlyphInfo(font: Font, codepoint: int) -> GlyphInfo: ...
def GetGlyphAtlasRec(font: Font, codepoint: int) -> Rectangle: ...
def UnloadUTF8(text: str) -> None: ...
def UnloadCodepoints(codepoints: int) -> None: ...
def GetCodepointCount(text: str) -> int: ...
def GetCodepoint(text: str, codepointSize: int) -> int: ...
def GetCodepointNext(text: str, codepointSize: int) -> int: ...
def GetCodepointPrevious(text: str, codepointSize: int) -> int: ...
def TextCopy(dst: str, src: str) -> int: ...
def TextIsEqual(text1: str, text2: str) -> bool: ...
def TextLength(text: str) -> int: ...
def TextAppend(text: str, append: str, position: int) -> None: ...
def TextFindIndex(text: str, find: str) -> int: ...
def TextToInteger(text: str) -> int: ...
def TextToFloat(text: str) -> float: ...
def DrawLine3D(startPos: Vector3, endPos: Vector3, color: Color) -> None: ...
def DrawPoint3D(position: Vector3, color: Color) -> None: ...
def DrawCircle3D(center: Vector3, radius: float, rotationAxis: Vector3, rotationAngle: float, color: Color) -> None: ...
def DrawTriangle3D(v1: Vector3, v2: Vector3, v3: Vector3, color: Color) -> None: ...
def DrawTriangleStrip3D(points: int, pointCount: int, color: Color) -> None: ...
def DrawCube(position: Vector3, width: float, height: float, length: float, color: Color) -> None: ...
def DrawCubeV(position: Vector3, size: Vector3, color: Color) -> None: ...
def DrawCubeWires(position: Vector3, width: float, height: float, length: float, color: Color) -> None: ...
def DrawCubeWiresV(position: Vector3, size: Vector3, color: Color) -> None: ...
def DrawSphere(centerPos: Vector3, radius: float, color: Color) -> None: ...
def DrawSphereEx(centerPos: Vector3, radius: float, rings: int, slices: int, color: Color) -> None: ...
def DrawSphereWires(centerPos: Vector3, radius: float, rings: int, slices: int, color: Color) -> None: ...
def DrawCylinder(position: Vector3, radiusTop: float, radiusBottom: float, height: float, slices: int, color: Color) -> None: ...
def DrawCylinderEx(startPos: Vector3, endPos: Vector3, startRadius: float, endRadius: float, sides: int, color: Color) -> None: ...
def DrawCylinderWires(position: Vector3, radiusTop: float, radiusBottom: float, height: float, slices: int, color: Color) -> None: ...
def DrawCylinderWiresEx(startPos: Vector3, endPos: Vector3, startRadius: float, endRadius: float, sides: int, color: Color) -> None: ...
def DrawCapsule(startPos: Vector3, endPos: Vector3, radius: float, slices: int, rings: int, color: Color) -> None: ...
def DrawCapsuleWires(startPos: Vector3, endPos: Vector3, radius: float, slices: int, rings: int, color: Color) -> None: ...
def DrawPlane(centerPos: Vector3, size: Vector2, color: Color) -> None: ...
def DrawRay(ray: Ray, color: Color) -> None: ...
def DrawGrid(slices: int, spacing: float) -> None: ...
def LoadModel(fileName: str) -> Model: ...
def LoadModelFromMesh(mesh: Mesh) -> Model: ...
def IsModelValid(model: Model) -> bool: ...
def UnloadModel(model: Model) -> None: ...
def GetModelBoundingBox(model: Model) -> BoundingBox: ...
def DrawModel(model: Model, position: Vector3, scale: float, tint: Color) -> None: ...
def DrawModelEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: float, scale: Vector3, tint: Color) -> None: ...
def DrawModelWires(model: Model, position: Vector3, scale: float, tint: Color) -> None: ...
def DrawModelWiresEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: float, scale: Vector3, tint: Color) -> None: ...
def DrawModelPoints(model: Model, position: Vector3, scale: float, tint: Color) -> None: ...
def DrawModelPointsEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: float, scale: Vector3, tint: Color) -> None: ...
def DrawBoundingBox(box: BoundingBox, color: Color) -> None: ...
def DrawBillboard(camera: Camera, texture: Texture2D, position: Vector3, scale: float, tint: Color) -> None: ...
def DrawBillboardRec(camera: Camera, texture: Texture2D, source: Rectangle, position: Vector3, size: Vector2, tint: Color) -> None: ...
def DrawBillboardPro(camera: Camera, texture: Texture2D, source: Rectangle, position: Vector3, up: Vector3, size: Vector2, origin: Vector2, rotation: float, tint: Color) -> None: ...
def UploadMesh(mesh: int, dynamic: bool) -> None: ...
def UpdateMeshBuffer(mesh: Mesh, index: int, data: int, dataSize: int, offset: int) -> None: ...
def UnloadMesh(mesh: Mesh) -> None: ...
def DrawMesh(mesh: Mesh, material: Material, transform: Matrix) -> None: ...
def DrawMeshInstanced(mesh: Mesh, material: Material, transforms: int, instances: int) -> None: ...
def GetMeshBoundingBox(mesh: Mesh) -> BoundingBox: ...
def GenMeshTangents(mesh: int) -> None: ...
def ExportMesh(mesh: Mesh, fileName: str) -> bool: ...
def ExportMeshAsCode(mesh: Mesh, fileName: str) -> bool: ...
def GenMeshPoly(sides: int, radius: float) -> Mesh: ...
def GenMeshPlane(width: float, length: float, resX: int, resZ: int) -> Mesh: ...
def GenMeshCube(width: float, height: float, length: float) -> Mesh: ...
def GenMeshSphere(radius: float, rings: int, slices: int) -> Mesh: ...
def GenMeshHemiSphere(radius: float, rings: int, slices: int) -> Mesh: ...
def GenMeshCylinder(radius: float, height: float, slices: int) -> Mesh: ...
def GenMeshCone(radius: float, height: float, slices: int) -> Mesh: ...
def GenMeshTorus(radius: float, size: float, radSeg: int, sides: int) -> Mesh: ...
def GenMeshKnot(radius: float, size: float, radSeg: int, sides: int) -> Mesh: ...
def GenMeshHeightmap(heightmap: Image, size: Vector3) -> Mesh: ...
def GenMeshCubicmap(cubicmap: Image, cubeSize: Vector3) -> Mesh: ...
def LoadMaterialDefault() -> Material: ...
def IsMaterialValid(material: Material) -> bool: ...
def UnloadMaterial(material: Material) -> None: ...
def SetMaterialTexture(material: int, mapType: int, texture: Texture2D) -> None: ...
def SetModelMeshMaterial(model: int, meshId: int, materialId: int) -> None: ...
def UpdateModelAnimation(model: Model, anim: ModelAnimation, frame: int) -> None: ...
def UpdateModelAnimationBones(model: Model, anim: ModelAnimation, frame: int) -> None: ...
def UnloadModelAnimation(anim: ModelAnimation) -> None: ...
def UnloadModelAnimations(animations: int, animCount: int) -> None: ...
def IsModelAnimationValid(model: Model, anim: ModelAnimation) -> bool: ...
def CheckCollisionSpheres(center1: Vector3, radius1: float, center2: Vector3, radius2: float) -> bool: ...
def CheckCollisionBoxes(box1: BoundingBox, box2: BoundingBox) -> bool: ...
def CheckCollisionBoxSphere(box: BoundingBox, center: Vector3, radius: float) -> bool: ...
def GetRayCollisionSphere(ray: Ray, center: Vector3, radius: float) -> RayCollision: ...
def GetRayCollisionBox(ray: Ray, box: BoundingBox) -> RayCollision: ...
def GetRayCollisionMesh(ray: Ray, mesh: Mesh, transform: Matrix) -> RayCollision: ...
def GetRayCollisionTriangle(ray: Ray, p1: Vector3, p2: Vector3, p3: Vector3) -> RayCollision: ...
def GetRayCollisionQuad(ray: Ray, p1: Vector3, p2: Vector3, p3: Vector3, p4: Vector3) -> RayCollision: ...
def InitAudioDevice() -> None: ...
def CloseAudioDevice() -> None: ...
def IsAudioDeviceReady() -> bool: ...
def SetMasterVolume(volume: float) -> None: ...
def GetMasterVolume() -> float: ...
def LoadWave(fileName: str) -> Wave: ...
def LoadWaveFromMemory(fileType: str, fileData: int, dataSize: int) -> Wave: ...
def IsWaveValid(wave: Wave) -> bool: ...
def LoadSound(fileName: str) -> Sound: ...
def LoadSoundFromWave(wave: Wave) -> Sound: ...
def LoadSoundAlias(source: Sound) -> Sound: ...
def IsSoundValid(sound: Sound) -> bool: ...
def UpdateSound(sound: Sound, data: int, sampleCount: int) -> None: ...
def UnloadWave(wave: Wave) -> None: ...
def UnloadSound(sound: Sound) -> None: ...
def UnloadSoundAlias(alias: Sound) -> None: ...
def ExportWave(wave: Wave, fileName: str) -> bool: ...
def ExportWaveAsCode(wave: Wave, fileName: str) -> bool: ...
def PlaySound(sound: Sound) -> None: ...
def StopSound(sound: Sound) -> None: ...
def PauseSound(sound: Sound) -> None: ...
def ResumeSound(sound: Sound) -> None: ...
def IsSoundPlaying(sound: Sound) -> bool: ...
def SetSoundVolume(sound: Sound, volume: float) -> None: ...
def SetSoundPitch(sound: Sound, pitch: float) -> None: ...
def SetSoundPan(sound: Sound, pan: float) -> None: ...
def WaveCopy(wave: Wave) -> Wave: ...
def WaveCrop(wave: int, initFrame: int, finalFrame: int) -> None: ...
def WaveFormat(wave: int, sampleRate: int, sampleSize: int, channels: int) -> None: ...
def UnloadWaveSamples(samples: int) -> None: ...
def LoadMusicStream(fileName: str) -> Music: ...
def LoadMusicStreamFromMemory(fileType: str, data: int, dataSize: int) -> Music: ...
def IsMusicValid(music: Music) -> bool: ...
def UnloadMusicStream(music: Music) -> None: ...
def PlayMusicStream(music: Music) -> None: ...
def IsMusicStreamPlaying(music: Music) -> bool: ...
def UpdateMusicStream(music: Music) -> None: ...
def StopMusicStream(music: Music) -> None: ...
def PauseMusicStream(music: Music) -> None: ...
def ResumeMusicStream(music: Music) -> None: ...
def SeekMusicStream(music: Music, position: float) -> None: ...
def SetMusicVolume(music: Music, volume: float) -> None: ...
def SetMusicPitch(music: Music, pitch: float) -> None: ...
def SetMusicPan(music: Music, pan: float) -> None: ...
def GetMusicTimeLength(music: Music) -> float: ...
def GetMusicTimePlayed(music: Music) -> float: ...
def LoadAudioStream(sampleRate: int, sampleSize: int, channels: int) -> AudioStream: ...
def IsAudioStreamValid(stream: AudioStream) -> bool: ...
def UnloadAudioStream(stream: AudioStream) -> None: ...
def UpdateAudioStream(stream: AudioStream, data: int, frameCount: int) -> None: ...
def IsAudioStreamProcessed(stream: AudioStream) -> bool: ...
def PlayAudioStream(stream: AudioStream) -> None: ...
def PauseAudioStream(stream: AudioStream) -> None: ...
def ResumeAudioStream(stream: AudioStream) -> None: ...
def IsAudioStreamPlaying(stream: AudioStream) -> bool: ...
def StopAudioStream(stream: AudioStream) -> None: ...
def SetAudioStreamVolume(stream: AudioStream, volume: float) -> None: ...
def SetAudioStreamPitch(stream: AudioStream, pitch: float) -> None: ...
def SetAudioStreamPan(stream: AudioStream, pan: float) -> None: ...
def SetAudioStreamBufferSizeDefault(size: int) -> None: ...
def SetAudioStreamCallback(stream: AudioStream, callback: AudioCallback) -> None: ...
def AttachAudioStreamProcessor(stream: AudioStream, processor: AudioCallback) -> None: ...
def DetachAudioStreamProcessor(stream: AudioStream, processor: AudioCallback) -> None: ...
def AttachAudioMixedProcessor(processor: AudioCallback) -> None: ...
def DetachAudioMixedProcessor(processor: AudioCallback) -> None: ...
